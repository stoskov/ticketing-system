@model CategoryPagebleViewModel

@{
    this.ViewBag.Title = "All Categories";
}

<div class="page page-categories-list">

    <div class="row-fluid ticket-main-title-wrap">
        <div class="span10">
            <h3>All Categories</h3>
        </div>
        <div class="span2 clearfix ticket-actions">
            <a class="right" href='@Url.Action("Create")'>New Category</a>
        </div>
    </div>

    <div class="row-fluid">
        <div class="input-append span10">
            <input class="span11" id="q" type="text" value='@this.Model.Filter.Q'>
            <button class="btn btn-primary" id="q-button" type="button">Search</button>
        </div>
        <div class="span2">
            <div class="right clearfix">
                <a class="btn btn-primary" href='@Url.Action("Index")'>Clear filters</a>
            </div>
        </div>
    </div>

    <div class="row-fluid">
        <table class="gridview">
            <thead>
                <tr>
                    <th class="categories-list header name">
                        @this.Html.DisplayNameFor(model => ((CategorySummaryViewModel)model.CategoriesList).Name)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in this.Model.CategoriesList)
                {
                    <tr>
                        <td class="categories-list content title">
                            <a href='@Url.Action("Details", new { id = item.Id })'>
                                @item.Name
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row-fluid">
            <span class="right">Results: @this.Model.TotalRecordsCount</span>
        </div>

        @Html.Paging(new PagingOptions { QueryParameterName = "page", LastPage = this.Model.PagesCount, wrapperClasses = "pagination-right" })

    </div>
</div>

@section scripts{
    <script type="text/javascript">
        function setFilter(filter, value) {
            var regex = new RegExp("(" + filter + "=[\\w\\W]*?)(&|$)", "i"),
                queryString = window.location.search;

            if (regex.test(queryString)) {
                queryString = queryString.replace(regex, function (a, b, c) {
                    return filter + "=" + value + c
                });
            }
            else if (queryString.length > 1) {
                queryString = queryString + "&" + filter + "=" + value;
            }
            else {
                queryString = queryString + "?" + filter + "=" + value;
            }

            window.location.search = queryString;
        }

        $(function () {
            $("#q-button").on("click", function () {
                var element = $("#q")[0],
                    value = element.value,
                    filter = element.id;

                setFilter(filter, value);
            });

            $("#q").on("keypress", function (e) {
                var element = $("#q")[0],
                    value = element.value,
                    filter = element.id;

                if (e.keyCode === 13) {
                    setFilter(filter, value);
                }
            });
        });
    </script>
}
